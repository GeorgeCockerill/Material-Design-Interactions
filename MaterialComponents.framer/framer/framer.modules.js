require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"colors":[function(require,module,exports){
exports.white = "#ffffff";

exports.black = "#000000";

exports.seekPink = "#E60278";

exports.cardBackground = "#fafafa";

exports.screenBackground = "#f9f9f9";

exports.cardShadow = "rgba(0,0,0,0.2)";



},{}],"materialInteractions":[function(require,module,exports){
exports.raiseAndLowerLayer = function(layer) {
  var lowerlayerAnimation, raiseLayerAnimation;
  raiseLayerAnimation = new Animation({
    layer: layer,
    properties: {
      scale: 1.01,
      shadowBlur: 20,
      shadowSpread: 4
    },
    time: 0.2,
    curve: "ease-in-out"
  });
  lowerlayerAnimation = new Animation({
    layer: layer,
    properties: {
      scale: 1,
      shadowBlur: 10,
      shadowSpread: 0
    },
    delay: 0.4,
    time: 0.4,
    curve: "ease-in-out"
  });
  raiseLayerAnimation.start();
  return raiseLayerAnimation.on("end", function() {
    return lowerlayerAnimation.start();
  });
};

exports.raiseLayer = function(layer) {
  var raiseLayerAnimation;
  raiseLayerAnimation = new Animation({
    layer: layer,
    properties: {
      scale: 1.01,
      shadowBlur: 20,
      shadowSpread: 4
    },
    time: 0.2,
    curve: "ease-in-out"
  });
  return raiseLayerAnimation.start();
};

exports.expandHorizontally = function(layer, animationDelay) {
  var exandHorizontallyAnimation;
  exandHorizontallyAnimation = new Animation({
    layer: layer,
    properties: {
      width: layer.superLayer.width,
      x: layer.superLayer.x
    },
    delay: animationDelay,
    time: 0.2,
    curve: "ease-in-out"
  });
  return exandHorizontallyAnimation.start();
};

exports.expandVertically = function(layer, animationDelay) {
  var expandVerticallyAnimation;
  expandVerticallyAnimation = new Animation({
    layer: layer,
    properties: {
      height: layer.superLayer.height,
      y: layer.superLayer.y
    },
    delay: animationDelay,
    time: 0.2,
    curve: "ease-in-out"
  });
  return expandVerticallyAnimation.start();
};

exports.rotateLayer = function(layer, rotationAngle) {
  var rotateAnimation;
  rotateAnimation = new Animation({
    layer: layer,
    properties: {
      rotation: rotationAngle
    },
    time: 0.2,
    curve: "ease-in-out"
  });
  return rotateAnimation.start();
};

exports.moveLayer = function(layer, moveByX, moveByY, moveDelay) {
  var moveAnimation;
  moveAnimation = new Animation({
    layer: layer,
    properties: {
      x: layer.x + moveByX,
      y: layer.y + moveByY
    },
    delay: moveDelay,
    time: 0.2,
    curve: "ease-in-out"
  });
  return moveAnimation.start();
};

exports.rippleEffect = function(touchX, touchY, layer) {
  var ripple, rippleAnimation;
  layer.clip = true;
  ripple = new Layer({
    borderRadius: "50%",
    scale: 0,
    opacity: .5,
    superLayer: layer,
    backgroundColor: layer.backgroundColor,
    brightness: 75,
    midX: touchX,
    midY: touchY,
    index: 0,
    force2d: true
  });
  rippleAnimation = ripple.animate({
    properties: {
      scale: layer.width / 50,
      clip: true,
      opacity: 0
    },
    curve: "ease-out",
    time: .3
  });
  return rippleAnimation.on("end", function() {
    return ripple.destroy();
  });
};



},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,
